"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9042],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return h}});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var m=n.createContext({}),p=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(m.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,m=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=p(a),u=i,h=d["".concat(m,".").concat(u)]||d[u]||c[u]||r;return a?n.createElement(h,l(l({ref:t},s),{},{components:a})):n.createElement(h,l({ref:t},s))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[d]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},11563:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return m},default:function(){return h},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var n=a(87462),i=a(63366),r=(a(67294),a(3905)),l=["components"],o={id:"04-git",title:"Git & GitHub"},m=void 0,p={unversionedId:"04-git",id:"04-git",title:"Git & GitHub",description:"Git",source:"@site/../docs/04-git.md",sourceDirName:".",slug:"/04-git",permalink:"/node_comit/docs/04-git",draft:!1,editUrl:"https://github.com/prma85/node_comit/edit/master/../docs/04-git.md",tags:[],version:"current",lastUpdatedBy:"prma85",lastUpdatedAt:1582870518,formattedLastUpdatedAt:"Feb 28, 2020",sidebarPosition:4,frontMatter:{id:"04-git",title:"Git & GitHub"},sidebar:"course",previous:{title:"Our First Site",permalink:"/node_comit/docs/03-first-site"},next:{title:"HTML",permalink:"/node_comit/docs/05-html"}},s={},d=[{value:"Git",id:"git",level:2},{value:"Using Git",id:"using-git",level:2},{value:"<code>git status</code>",id:"git-status",level:3},{value:"<code>git init</code>",id:"git-init",level:3},{value:"<code>git add</code>",id:"git-add",level:3},{value:"<code>git commit</code>",id:"git-commit",level:3},{value:"<code>git log</code>",id:"git-log",level:3},{value:"<code>git rm</code>",id:"git-rm",level:3},{value:"Github",id:"github",level:3},{value:"<code>git remote</code>",id:"git-remote",level:3},{value:"<code>git clone</code>",id:"git-clone",level:3},{value:"Final notes",id:"final-notes",level:2},{value:"Git &amp; Github Assets",id:"git--github-assets",level:2}],c={toc:d},u="wrapper";function h(e){var t=e.components,o=(0,i.Z)(e,l);return(0,r.kt)(u,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"git"},"Git"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Git is a free and open source ",(0,r.kt)("strong",{parentName:"p"},"distributed version control system")," designed to handle everything from small to very large projects with speed and efficiency.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://git-scm.com"},"Download and install Git")),(0,r.kt)("li",{parentName:"ul"},"After install run the following command on your terminal. This should tell us the version of Git (Current version is ",(0,r.kt)("inlineCode",{parentName:"li"},"2.21.0"),").",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git --version\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://help.github.com/articles/setting-your-commit-email-address-in-git/"},"Configure Git name and email"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git config --global user.name <github userID>\ngit config --global user.email <github email>\n"))),(0,r.kt)("li",{parentName:"ul"},"To configure our Git/Github project we'll need to use our ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Command-line_interface"},"command line interface")),(0,r.kt)("li",{parentName:"ul"},"This tutorial uses the Linux/Mac commands (If you use Windows please check the previous guide)"),(0,r.kt)("li",{parentName:"ul"},"You\u2019ve downloaded Git, now what? ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/jlord/git-it-electron#what-to-install"},"Download Git-It")," to your machine and you\u2019ll get a hands-on tutorial that teaches you to use Git right from your local environment, using commands on real repositories. ",(0,r.kt)("img",{alt:"Welcome to Git-It",src:a(61074).Z,width:"1954",height:"1472"}))),(0,r.kt)("h2",{id:"using-git"},"Using Git"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To configure our Git/Github project we'll need to use our ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Command-line_interface"},"command line interface")),(0,r.kt)("li",{parentName:"ul"},"As the commands might change between operating systems:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf"},"Windows Command Prompt Cheat sheet")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://learncodethehardway.org/unix/bash_cheat_sheet.pdf"},"Linux/Mac Bash Cheat sheet")))),(0,r.kt)("li",{parentName:"ul"},"This tutorial uses the Linux/Mac commands (If you use Windows please check the previous guide)"),(0,r.kt)("li",{parentName:"ul"},"Create a folder with the name ",(0,r.kt)("inlineCode",{parentName:"li"},"nodeyqr"),(0,r.kt)("inlineCode",{parentName:"li"},"bash mkdir nodeyqr")),(0,r.kt)("li",{parentName:"ul"},"Change directory to ",(0,r.kt)("inlineCode",{parentName:"li"},"nodeyqr"),(0,r.kt)("inlineCode",{parentName:"li"},"bash cd nodeyqr")),(0,r.kt)("li",{parentName:"ul"},"Make sure you're on the right folder (",(0,r.kt)("inlineCode",{parentName:"li"},"nodeyqr"),")\n",(0,r.kt)("inlineCode",{parentName:"li"},"bash pwd")),(0,r.kt)("li",{parentName:"ul"},"You must see your path and ",(0,r.kt)("strong",{parentName:"li"},"/nodeyqr")),(0,r.kt)("li",{parentName:"ul"},"At this point we have everything we need to start versioning our ",(0,r.kt)("inlineCode",{parentName:"li"},"nodeyqr")," folder / project")),(0,r.kt)("h3",{id:"git-status"},(0,r.kt)("inlineCode",{parentName:"h3"},"git status")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"git status")," show the working tree status"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-status"},"Git status doc")),(0,r.kt)("li",{parentName:"ul"},"Run the following command:\n",(0,r.kt)("inlineCode",{parentName:"li"},"bash git status")),(0,r.kt)("li",{parentName:"ul"},"You should see the following legend: fatal: ",(0,r.kt)("inlineCode",{parentName:"li"},"Not a git repository (or any of the parent directories): .git")),(0,r.kt)("li",{parentName:"ul"},"We get this error message as we didn't told Git to start watching this project")),(0,r.kt)("h3",{id:"git-init"},(0,r.kt)("inlineCode",{parentName:"h3"},"git init")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This command create an empty Git repository or reinitialize an existing one")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To configure Git in this folder well run ",(0,r.kt)("inlineCode",{parentName:"p"},"git init"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-init"},"Git init doc"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"bash git init"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You should get the following message: ",(0,r.kt)("inlineCode",{parentName:"p"},"Initialized empty Git repository in your folder path"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now Git knows that we want to version this project and keep track of all the changes we do")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Let check git status again"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git status\n\n        > On branch master\n        > No commits yet\n        > nothing to commit (create/copy files and use "git add" to track)\n        ```\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"After running ",(0,r.kt)("strong",{parentName:"p"},"git init")," we don't longer see an error")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now we find out that we'll be using ",(0,r.kt)("strong",{parentName:"p"},"branches"),", ",(0,r.kt)("strong",{parentName:"p"},"commits")," & ",(0,r.kt)("strong",{parentName:"p"},"add"),"ing files")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Open the folder ",(0,r.kt)("inlineCode",{parentName:"p"},"nodeyqr")," using VSC (Visual Studio Code)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Git creates a hidden folder to keep track of our project")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"List your folder files to see the ",(0,r.kt)("inlineCode",{parentName:"p"},".git")," folder"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ls -la\n\n        > .\n        > ..\n        > .git\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a new file and save it with the name ",(0,r.kt)("strong",{parentName:"p"},"index.html"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add the following content:\n",(0,r.kt)("inlineCode",{parentName:"p"},'html <!DOCTYPE html> <html lang="en"> <head> <title>Using Git</title> </head> <body> <h1>Using Git</h1> <p>Creating my first versioned file</p> </body> </html>'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Make sure to save the file again")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Go to the terminal and check Git status"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git status\n\n        > On branch master\n        > No commits yet\n        > Untracked files:\n            (use "git add <file>..." to include in what will be committed)\n\n            index.html\n\n        > nothing added to commit but untracked files present (use "git add" to track)\n        ```\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"So we still get the same messages:\n",(0,r.kt)("inlineCode",{parentName:"p"},"> On branch master > No commits yet"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"But now we can see that we added a new file to the folder and Git knows about it")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"As we haven't done anything with this file it have an ",(0,r.kt)("inlineCode",{parentName:"p"},"Untracked")," state")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Also Git gives us some help: ",(0,r.kt)("inlineCode",{parentName:"p"},'use "git add <file>..." to include in what will be committed')))),(0,r.kt)("h3",{id:"git-add"},(0,r.kt)("inlineCode",{parentName:"h3"},"git add")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This command add file/s contents to Git index")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Lets add the index.html to Git index\n",(0,r.kt)("inlineCode",{parentName:"p"},"bash git add index.html"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Looks like nothing happened")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check git status again"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git status\n\n        > On branch master\n        > No commits yet\n        > Changes to be committed:\n            (use "git rm --cached <file>..." to unstage)\n\n        >   new file:   index.html\n        ```\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By executing ",(0,r.kt)("strong",{parentName:"p"},"git add")," we add the documents that we want to ",(0,r.kt)("strong",{parentName:"p"},"commit")))),(0,r.kt)("h3",{id:"git-commit"},(0,r.kt)("inlineCode",{parentName:"h3"},"git commit")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This command records changes to the repository")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When we commit one or many files we create a new version of our project")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To know what changed over time it's a good practice to write a descriptive message")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now we can commit our changes running ",(0,r.kt)("strong",{parentName:"p"},"git commit -m 'Commit message'")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git commit -m 'Added index.html file to project'\n\n        > [master (root-commit) 50400f2] Added index.html file to project\n        > 1 file changed, 10 insertions(+)\n        > create mode 100644 index.html\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We can see that only 1 file has changed and we added 10 new lines of code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Run git status to check the new status"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git status\n\n        > On branch master\n        > nothing to commit, working tree clean\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"As we just committed our changes there's nothing new to commit"))),(0,r.kt)("h3",{id:"git-log"},(0,r.kt)("inlineCode",{parentName:"h3"},"git log")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This command shows commit logs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We can check our project commit history by running ",(0,r.kt)("strong",{parentName:"p"},"git log")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git log\n\n        > commit 50400f2fd1b7f6ce7030a2e651ac6c2956d53c58 (HEAD -> master)\n        > Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        > Date:   Sun Mar 11 21:39:21 2018 -0500\n\n        >    Added index.html file to project\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Once we run this command we can see all the commits that this project has")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By writing good commit messages we can know more about what changed over time")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Open the index.html file again and change the following lines:\n",(0,r.kt)("inlineCode",{parentName:"p"},"html <h1>Using Git</h1> <p>Creating my first versioned file</p>"),"\nTo\n",(0,r.kt)("inlineCode",{parentName:"p"},"html <h1>Learning and using Git</h1> <p>Creating my commits</p>"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Save your file")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check Git status"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git status\n\n        > On branch master\n        > Changes not staged for commit:\n            (use "git add <file>..." to update what will be committed)\n            (use "git checkout -- <file>..." to discard changes in working directory)\n\n            modified:   index.html\n\n        > no changes added to commit (use "git add" and/or "git commit -a")\n        ```\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now we can see a couple of new things going on:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Git shows 2 options:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"We can add the changes we did to index.html to commit them: ",(0,r.kt)("inlineCode",{parentName:"li"},'(use "git add <file>..." to update what will be committed)')),(0,r.kt)("li",{parentName:"ul"},"Also we can checkout the previous index.html version and discard the changes we did: ",(0,r.kt)("inlineCode",{parentName:"li"},'(use "git checkout -- <file>..." to discard changes in working directory)')))),(0,r.kt)("li",{parentName:"ul"},"Also now index.html is modified (",(0,r.kt)("inlineCode",{parentName:"li"},"modified: index.html"),") instead than a new file"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Go ahead and add this changes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Commit the changes and create a new version")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The commit message should be: Updated index.html content")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check git log"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git add index.html\ngit status\ngit commit -m 'Updated index.html content'\ngit log\n\n        > commit 418b85f87a0804a629719a03d67c264c9d64be52 (HEAD -> master)\n        > Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        > Date:   Sun Mar 11 22:03:32 2018 -0500\n\n                Updated index.html content\n\n        > commit 50400f2fd1b7f6ce7030a2e651ac6c2956d53c58\n        > Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        > Date:   Sun Mar 11 21:39:21 2018 -0500\n\n                Added index.html file to project\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now we have 2 commits in our project log")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Delete index.html\n",(0,r.kt)("inlineCode",{parentName:"p"},"bash rm index.html"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check Git status"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git status\n\n        > On branch master\n        > Changes not staged for commit:\n            (use "git add/rm <file>..." to update what will be committed)\n            (use "git checkout -- <file>..." to discard changes in working directory)\n\n            deleted:    index.html\n\n        > no changes added to commit (use "git add" and/or "git commit -a")\n        ```\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We can see that we deleted the file")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Git shows 2 options"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"We can remove the file from git project by running git rm"),(0,r.kt)("li",{parentName:"ul"},"Or discard the changes running git checkout -- index.html"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"As we don't want to delete the file execute git checkout to get the previous version\n",(0,r.kt)("inlineCode",{parentName:"p"},"bash git checkout -- index.html"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If we run git status we'll see that the deleted index.html message is no longer there"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git status\n\n        > On branch master\n        > nothing to commit, working tree clean\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Also if we list our folder files we'll see that index.html is still there"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ls -la\n\n        > .\n        > ..\n        > .git\n        > index.html\n        ```\n")))),(0,r.kt)("h3",{id:"git-rm"},(0,r.kt)("inlineCode",{parentName:"h3"},"git rm")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To delete one or many files from a project we can run ",(0,r.kt)("strong",{parentName:"p"},"git rm"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This command remove files from the working tree and from the index")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Delete index.html from the project"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git rm index.html\n\n        > rm 'index.html'\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check Git status"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git status\n\n        > On branch master\n        > Changes to be committed:\n            (use "git reset HEAD <file>..." to unstage)\n\n            deleted:    index.html\n        ```\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Git rm works like git add but instead of adding the file we'll delete it from the project")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now we need to commit our change and delete the index.html file"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git commit -m 'Deleted index.html'\n\n        > [master a03ee32] Deleted index.html\n        >  1 file changed, 10 deletions(-)\n        >  delete mode 100644 index.html\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now check Git status"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git status\n\n        > On branch master\n        > nothing to commit, working tree clean\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"List all the folder files"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ls -la\n\n        > .\n        > ..\n        > .git\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Finally check git log"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git log\n\n        commit a03ee32909a04e5001860f6048289cb5d7b59a1a (HEAD -> master)\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 22:16:30 2018 -0500\n\n                Deleted index.html\n\n        commit 418b85f87a0804a629719a03d67c264c9d64be52\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 22:03:32 2018 -0500\n\n                Updated index.html content\n\n        commit 50400f2fd1b7f6ce7030a2e651ac6c2956d53c58\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 21:39:21 2018 -0500\n\n                Added index.html file to project\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We can see that we added a index.html file")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Then we updated the file contents")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Finally we deleted it")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now we have an empty project again but with git history"))),(0,r.kt)("h3",{id:"github"},"Github"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Go to ",(0,r.kt)("a",{parentName:"li",href:"https://github.com"},"github.com")),(0,r.kt)("li",{parentName:"ul"},"Create a new Github account"),(0,r.kt)("li",{parentName:"ul"},"Create a new project with the name ",(0,r.kt)("inlineCode",{parentName:"li"},"nodeyqr")),(0,r.kt)("li",{parentName:"ul"},"Once you create a new project Github will show you all the possible options that we have"),(0,r.kt)("li",{parentName:"ul"},"As we already created a project we can run the following commands")),(0,r.kt)("h3",{id:"git-remote"},(0,r.kt)("inlineCode",{parentName:"h3"},"git remote")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now let's execute this command. Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"<user>")," with your github user.\n",(0,r.kt)("inlineCode",{parentName:"p"},"bash git remote add origin https://github.com/<user>/nodeyqr.git"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By executing this command we're configuring a remote git server (github)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We run the ",(0,r.kt)("strong",{parentName:"p"},"git remote")," commands to work with a remote server")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Then we are adding a new server so we have ",(0,r.kt)("strong",{parentName:"p"},"add"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Origin is the default name by convention for our main source")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"So with this command we let git know that we want to add a remote server with the url ",(0,r.kt)("inlineCode",{parentName:"p"},"https://github.com/<user>/nodeyqr.git")," that we'll call origin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We can list the project remote servers"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git remote\n\n        > origin\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"That didn't help :(")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Do it again but now add ",(0,r.kt)("strong",{parentName:"p"},"-v")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git remote -v\n\n        origin  https://github.com/<user>/nodeyqr.git (fetch)\n        origin  https://github.com/<user>/nodeyqr.git (push)\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now I can see that I have ",(0,r.kt)("strong",{parentName:"p"},"fetch")," & ",(0,r.kt)("strong",{parentName:"p"},"push")," permission")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We use ",(0,r.kt)("strong",{parentName:"p"},"fetch")," to get changes from the server")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We use ",(0,r.kt)("strong",{parentName:"p"},"push")," to push our changes to the server")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Push your local code changes to the Github server"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git push origin master\n\n        > Counting objects: 12, done.\n        > Delta compression using up to 8 threads.\n        > Compressing objects: 100% (8/8), done.\n        > Writing objects: 100% (12/12), 1.20 KiB | 1.20 MiB/s, done.\n        > Total 12 (delta 1), reused 0 (delta 0)\n        > remote: Resolving deltas: 100% (1/1), done.\n        To github.com:nisnardi/nodeyqr.git\n        * [new branch]      master -> master\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If we refresh our Github page we'll see that our html folder is now part of the Github project")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Click on the html folder to see the exercises files")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now go back to the project home page")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Click on commits")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now you can see you commits history in a web page")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To setup our Github project it's nice to add a README.md file as initial project file")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a README.md file at the same level than .git folder\n",(0,r.kt)("inlineCode",{parentName:"p"},"bash /- |- .git |- README.md"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add the following content to README.md"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-#",metastring:"Node.js Regina","Node.js":!0,Regina:!0},"\n        This project it's to learn HTML, CSS, JS, Node.js and MongoDB\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check Git status"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git status\n\n        > On branch master\n        > Untracked files:\n            (use "git add <file>..." to include in what will be committed)\n\n            README.md\n\n        > nothing added to commit but untracked files present (use "git add" to track)\n        ```\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now add the README.md file to git\n",(0,r.kt)("inlineCode",{parentName:"p"},"bash git add ."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By using a dot ",(0,r.kt)("inlineCode",{parentName:"p"},".")," we let Git know that we want to add all the files that we changed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check Git status"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git status\n\n        > On branch master\n        > Changes to be committed:\n            (use "git reset HEAD <file>..." to unstage)\n\n        >   new file:   README.md\n        ```\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Looks like README.md has been ",(0,r.kt)("inlineCode",{parentName:"p"},"staged")," so we can commit it")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"So we just need to commit"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git commit -m 'Added README.md'\n\n        > [master 98db347] Added README.md\n        > 1 file changed, 5 insertions(+)\n        > create mode 100644 README.md\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check Git log"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git status\n\n        commit 98db34767b80dca6e55c63d1c60f18641cd9e473 (HEAD -> master)\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 22:46:58 2018 -0500\n\n                Added README.md\n\n        commit a03ee32909a04e5001860f6048289cb5d7b59a1a\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 22:16:30 2018 -0500\n\n                Deleted index.html\n\n        commit 418b85f87a0804a629719a03d67c264c9d64be52\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 22:03:32 2018 -0500\n\n                Updated index.html content\n\n        commit 50400f2fd1b7f6ce7030a2e651ac6c2956d53c58\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 21:39:21 2018 -0500\n\n                Added index.html file to project\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Look at the last commit and the the previous one")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The last commit shows (HEAD -> master)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The previous one (origin/master)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"So it looks like our local project is ahead 1 commit from origin (our remote server)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check on Github commits to see if you have the latest commit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"As we don't have it we need to push it"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git push origin master\n\n        > Counting objects: 3, done.\n        > Delta compression using up to 8 threads.\n        > Compressing objects: 100% (3/3), done.\n        > Writing objects: 100% (3/3), 384 bytes | 384.00 KiB/s, done.\n        > Total 3 (delta 0), reused 0 (delta 0)\n        > To github.com:nisnardi/test.git\n        >   c74bf4d..98db347  master -> master\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now check your commits on Github")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Also take a look at the project home page")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"As you can see we can add a home page for our projects")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To learn more about Github Markdown read ",(0,r.kt)("a",{parentName:"p",href:"https://guides.github.com/features/mastering-markdown/"},"Github Mastering Markdown guide")))),(0,r.kt)("h3",{id:"git-clone"},(0,r.kt)("inlineCode",{parentName:"h3"},"git clone")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This command clone a repository into a new directory")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a test folder outside the ",(0,r.kt)("inlineCode",{parentName:"p"},"nodeyqr")," one")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Change directory to the test folder"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd .. (to get out the nodeyqr folder)\nmkdir test\ncd test\npwd\n\n        /test\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We created this folder so we can clone our Github project in a different folder")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now we can clone the nodeyqr Github project into this test folder one. Remember of replacing ",(0,r.kt)("inlineCode",{parentName:"p"},"<user>")," with your github username.\n",(0,r.kt)("inlineCode",{parentName:"p"},"bash git clone https://github.com/<user>/nodeyqr.git"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"List the files"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ls -la\n\n        > .\n        > ..\n        > nodeyqr\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Git by default uses the project name as project folder name")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Change directory to ",(0,r.kt)("inlineCode",{parentName:"p"},"nodeyqr"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"bash cd nodeyqr"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check Git status"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"git status\n\n        > On branch master\n        > Your branch is up to date with 'origin/master'.\n\n        > nothing to commit, working tree clean\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Nothing to commit as we just got a fresh copy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check the project log\n",(0,r.kt)("inlineCode",{parentName:"p"},"bash git log"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You'll see the same commits as we did early as it's the same project")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"By cloning the project some other team member can work on this project too")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now update the README.md file (open it using VSC)\n",(0,r.kt)("inlineCode",{parentName:"p"},"1. [HTML exercises](html)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Save the file")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add the new change\n",(0,r.kt)("inlineCode",{parentName:"p"},"bash git add ."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now commit the changes"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git commit -m 'Added html exercises link to README.md'\n\n        > [master 1678975] Added html exercises link to README.md\n        > 1 file changed, 2 insertions(+), 1 deletion(-)\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"So at this moment we have 2 folders that have the same project")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The test one has one more commit that the initial ",(0,r.kt)("inlineCode",{parentName:"p"},"nodeyqr")," one")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Push your code to the Github server"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git push origin master\n\n        > Counting objects: 3, done.\n        > Delta compression using up to 8 threads.\n        > Compressing objects: 100% (3/3), done.\n        > Writing objects: 100% (3/3), 354 bytes | 354.00 KiB/s, done.\n        > Total 3 (delta 1), reused 0 (delta 0)\n        > remote: Resolving deltas: 100% (1/1), completed with 1 local object.\n        > To github.com:nisnardi/test.git\n        >    98db347..1678975  master -> master\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now we have the changes in the test/nodeyqr folder and on the Github server")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We still need to update our initial ",(0,r.kt)("inlineCode",{parentName:"p"},"nodeyqr"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Lets change directory to the previous folder"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd .. (to leave the nodeyqr folder)\ncd .. (to leave the test folder)\ncd nodeyqr (to enter the nodeyqr folder)\ngit status\n\n        > On branch master\n        > nothing to commit, working tree clean\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check git log"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"git log\n\n        commit 98db34767b80dca6e55c63d1c60f18641cd9e473\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 22:46:58 2018 -0500\n\n                Added README.md\n\n        commit a03ee32909a04e5001860f6048289cb5d7b59a1a\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 22:16:30 2018 -0500\n\n                Deleted index.html\n\n        commit 418b85f87a0804a629719a03d67c264c9d64be52\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 22:03:32 2018 -0500\n\n                Updated index.html content\n\n        commit 50400f2fd1b7f6ce7030a2e651ac6c2956d53c58\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 21:39:21 2018 -0500\n\n                Added index.html file to project\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We're missing the last commit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To sync again with the remote server we can fetch the latest changes"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git fetch origin master\n\n        > remote: Counting objects: 3, done.\n        > remote: Compressing objects: 100% (2/2), done.\n        > remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0\n        > Unpacking objects: 100% (3/3), done.\n        > From github.com:nisnardi/test\n        >  * branch            master     -> FETCH_HEAD\n        >    98db347..1678975  master     -> origin/master\n        > Updating 98db347..1678975\n        > Fast-forward\n        >  README.md | 3 ++-\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Git got all the changes from the server")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now check the log again"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git log\n\n        commit 16789753fe1be574045cafa60a4ace270a643100 (HEAD -> master, origin/master)\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 23:04:24 2018 -0500\n\n                Added html exercises link to README.md\n\n        commit 98db34767b80dca6e55c63d1c60f18641cd9e473\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 22:46:58 2018 -0500\n\n                Added README.md\n\n        commit a03ee32909a04e5001860f6048289cb5d7b59a1a\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 22:16:30 2018 -0500\n\n                Deleted index.html\n\n        commit 418b85f87a0804a629719a03d67c264c9d64be52\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 22:03:32 2018 -0500\n\n                Updated index.html content\n\n        commit 50400f2fd1b7f6ce7030a2e651ac6c2956d53c58\n        Author: Nicolas Isnardi <nicolasisnardi@gmail.com>\n        Date:   Sun Mar 11 21:39:21 2018 -0500\n\n                Added index.html file to project\n        ```\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now our local folder is in sync with the server")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a ",(0,r.kt)("strong",{parentName:"p"},"html")," folder at the same level than the html one")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add this folder to git")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Commit your changes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Push your changes to the origin server")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Now you'll be able to add your html exercises into this ",(0,r.kt)("strong",{parentName:"p"},"html")," folder and git will version them")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Happy coding and hope you like using Git and Github!")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Checkout the great ",(0,r.kt)("a",{parentName:"p",href:"https://octodex.github.com"},"Octocats")))),(0,r.kt)("h2",{id:"final-notes"},"Final notes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We'll work on our local project by creating and updating files"),(0,r.kt)("li",{parentName:"ul"},"Once we are happy with our code we'll have to add all the files to ",(0,r.kt)("inlineCode",{parentName:"li"},"stage")," (git add index.html)"),(0,r.kt)("li",{parentName:"ul"},"Then we'll need to commit (git commit -m 'Commit Message')"),(0,r.kt)("li",{parentName:"ul"},"If we have a Github project and we want to share/update it we'll have to run ",(0,r.kt)("inlineCode",{parentName:"li"},"git push origin master")),(0,r.kt)("li",{parentName:"ul"},"If someone else updates our remote server we'll have to run ",(0,r.kt)("inlineCode",{parentName:"li"},"git fetch origin master")," to get the latest changes"),(0,r.kt)("li",{parentName:"ul"},"We'll do this workflow many times so get used to it and remember to check ",(0,r.kt)("inlineCode",{parentName:"li"},"git status")," to know what's going on")),(0,r.kt)("h2",{id:"git--github-assets"},"Git & Github Assets"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://git-scm.com/docs"},"Git Reference")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://git-scm.com/book/en/v2"},"Git Free book")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf"},"Github Git cheat sheet")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://ndpsoftware.com/git-cheatsheet.html#loc=;"},"Visual cheat sheet")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com"},"Github")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://guides.github.com/activities/hello-world"},"Github Hello World")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/githubguides"},"Github Guides")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://try.github.io/"},"Resources to learn Git"))))}h.isMDXComponent=!0},61074:function(e,t,a){t.Z=a.p+"assets/images/git-it-9372fca76e45ceaad8dc420771b94430.png"}}]);