"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6280],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return c}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),o=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,p=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=o(a),h=r,c=u["".concat(s,".").concat(h)]||u[h]||d[h]||p;return a?n.createElement(c,i(i({ref:t},m),{},{components:a})):n.createElement(c,i({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=a.length,i=new Array(p);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var o=2;o<p;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},39008:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return u}});var n=a(87462),r=a(63366),p=(a(67294),a(3905)),i=["components"],l={id:"11-express",title:"Building a site using Node.js and Express"},s=void 0,o={unversionedId:"11-express",id:"11-express",title:"Building a site using Node.js and Express",description:"Getting start",source:"@site/../docs/11-express.md",sourceDirName:".",slug:"/11-express",permalink:"/node_comit/docs/11-express",draft:!1,editUrl:"https://github.com/prma85/node_comit/edit/master/../docs/11-express.md",tags:[],version:"current",lastUpdatedBy:"Paulo Andrade",lastUpdatedAt:1676525872,formattedLastUpdatedAt:"Feb 16, 2023",sidebarPosition:11,frontMatter:{id:"11-express",title:"Building a site using Node.js and Express"},sidebar:"course",previous:{title:"Node.js",permalink:"/node_comit/docs/10-nodejs"},next:{title:"MongoDB & Mongoose",permalink:"/node_comit/docs/12-mongodb"}},m={},u=[{value:"Getting start",id:"getting-start",level:2},{value:"Installing packages",id:"installing-packages",level:3},{value:"Configuring scripts",id:"configuring-scripts",level:3},{value:"Using express server",id:"using-express-server",level:3},{value:"Project configuration",id:"project-configuration",level:3},{value:"Using public folder",id:"using-public-folder",level:3},{value:"Adding more content",id:"adding-more-content",level:3},{value:"Adding routes",id:"adding-routes",level:3},{value:"Creating more templates",id:"creating-more-templates",level:3},{value:"Getting the data by id",id:"getting-the-data-by-id",level:3},{value:"Refining the code",id:"refining-the-code",level:3},{value:"Improving the CSS",id:"improving-the-css",level:3},{value:"Adding new data",id:"adding-new-data",level:3},{value:"Handling POST requests",id:"handling-post-requests",level:3},{value:"Responding requests",id:"responding-requests",level:3}],d={toc:u},h="wrapper";function c(e){var t=e.components,a=(0,r.Z)(e,i);return(0,p.kt)(h,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h2",{id:"getting-start"},"Getting start"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Now that we know how to create a project with NPM")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Add Express as dependency and create a web server")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We can also create some routes to handle our requests")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"And configure our statics assets")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Also, we can create templates using Pug and render them from Express server using the render method")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"It's time to put everything in action")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"First lets create a node-site-example folder and change directory into it"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir node-site-example\ncd node-site-example\n")))),(0,p.kt)("h3",{id:"installing-packages"},"Installing packages"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"After creating the folder lets install pug, express and ",(0,p.kt)("a",{parentName:"p",href:"https://github.com/remy/nodemon"},"nodemon")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"npm install express pug nodemon\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Nodemon is a Node.js module that will watch our files to see if we save them and reload the server for us"))),(0,p.kt)("h3",{id:"configuring-scripts"},"Configuring scripts"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Configure NPM start script"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-json"},'"start": "nodemon"\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Nodemon will look for an index.js file to start the server and watch for changes"))),(0,p.kt)("h3",{id:"using-express-server"},"Using express server"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Create an ",(0,p.kt)("inlineCode",{parentName:"p"},"index.js")," file and add a express server")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"index.js"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"And start the server"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"npm start\n\n> node-site-example@1.0.0 start /node-site-example\n> nodemon\n\n[nodemon] 1.17.4\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching: *.*\n[nodemon] starting `node index.js`\nServer running on port 3000\n")))),(0,p.kt)("h3",{id:"project-configuration"},"Project configuration"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Now we have our server running and we need to configure routes, static assets and the template engine")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We can see that nodemon is looking for all our files ",(0,p.kt)("inlineCode",{parentName:"p"},"[nodemon] watching: *.*"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Also we can restart the server writing ",(0,p.kt)("inlineCode",{parentName:"p"},"rs")," on the terminal that is running nodemon on in case we need to")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Create a ",(0,p.kt)("inlineCode",{parentName:"p"},"views")," folder")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Add ",(0,p.kt)("inlineCode",{parentName:"p"},"index.pug")," to the views folder")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Add this code to index.pug"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-pug"},"doctype html\nhead\n  title Simple site using Node.js, Express and Pug\nbody\n  h1 Wellcome to Node.js, Express and Pug\n  p This project is just to practice\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Configure Express to use pug in the ",(0,p.kt)("inlineCode",{parentName:"p"},"index.js")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},"app.set('view engine', 'pug');\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Finaly add a root get route handler to render the home content using index.html"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/', (req, res) => {\n  res.render('index', {});\n});\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Your ",(0,p.kt)("inlineCode",{parentName:"p"},"index.js")," file must look like this"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst app = express();\nconst port = 3000;\n\napp.set("view engine", "pug");\n\napp.get("/", (req, res) => {\n  res.render("index", {});\n});\n\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n')))),(0,p.kt)("h3",{id:"using-public-folder"},"Using public folder"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"It's time to add the static public folder and configure express to use it")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Create a ",(0,p.kt)("inlineCode",{parentName:"p"},"public")," folder")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Configure Express to use the public folder in the ",(0,p.kt)("inlineCode",{parentName:"p"},"index.js")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},"app.use(express.static('public'));\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We could add all the static assets together as siblings but it's better to organize our code")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Create the following folder structure"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"/node-site-example\n|- public\n    |- css\n        |- styles.css\n    |- img\n    |- js\n      |- scripts.js\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Add some CSS to the site in the ",(0,p.kt)("inlineCode",{parentName:"p"},"styles.css")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-css"},"* {\n  padding: 0;\n  margin: 0;\n}\n\nbody {\n  color: black;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 16px;\n}\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Add some JS to the site in the ",(0,p.kt)("inlineCode",{parentName:"p"},"scripts.js")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'window.onload = function() {\n  console.log("Loaded site");\n};\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Now that we have the css and js files ready we need to add it to the template ",(0,p.kt)("inlineCode",{parentName:"p"},"index.pug")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-pug"},'link(rel=\'stylesheet\', href="/css/styles.css")\nscript(src="/js/scripts.js")\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We use link for the CSS file and script for the JavaScript file")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"If you refresh the browser now the font should look different and the size too")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Also is nice that we removed all padding and margins from the elements")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"As we'll have to create more than one page we need to create a layout")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Create the ",(0,p.kt)("inlineCode",{parentName:"p"},"layout.pug")," file inside the view folder")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Copy and paste all the content from index.pug template into the layout.pug one")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Also we need to add a styles, scripts & content block so we can change the content from the different templates in the ",(0,p.kt)("inlineCode",{parentName:"p"},"layout.pug")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-pug"},'doctype html\nhtml\n  head\n    title Simple site using Node.js, Express and Pug\n    link(rel=\'stylesheet\', href="/css/styles.css")\n    block styles\n    script(src="/js/scripts.js")\n    block scripts\n  body\n    block content\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Now the index.pug file will only contain the code that is relative only to that file")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We need to extend the layout and create the block content in the ",(0,p.kt)("inlineCode",{parentName:"p"},"index.pug")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-pug"},"extends ./layout.pug\n\nblock content\n  h1 Wellcome to Node.js, Express and Pug\n  p This project is just to practice\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Check that the site it still works as expected")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"If we don't have any errors we must see the same content but now using the layout"))),(0,p.kt)("h3",{id:"adding-more-content"},"Adding more content"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Inside the public/img create a ",(0,p.kt)("inlineCode",{parentName:"p"},"superheroes")," folder and download the following images from ",(0,p.kt)("a",{parentName:"p",href:"https://github.com/prma85/node_comit/tree/master/resources/exercises"},"here")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"/node-site-example\n|- public\n    |- img\n        |- blackwidow.jpg\n        |- captainmarvel.jpg\n        |- captanamerica.jpg\n        |- daredevil.jpg\n        |- hulk.jpg\n        |- ironman.jpg\n        |- spiderman.jpg\n        |- thor.jpg\n        |- wolverine.jpg\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Now we have the superheroes images in our static assets folder")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We want to create a homepage with some superheores picture and name")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Then we can create a superhero description page")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Start by creating a superheroes array in the root route handler in the ",(0,p.kt)("inlineCode",{parentName:"p"},"index.js")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'app.get("/", (req, res) => {\n  const superheroes = [\n    { name: "SPIDER-MAN", image: "spiderman.jpg" },\n    { name: "CAPTAIN MARVEL", image: "captainmarvel.jpg" },\n    { name: "HULK", image: "hulk.jpg" },\n    { name: "THOR", image: "thor.jpg" },\n    { name: "IRON MAN", image: "ironman.jpg" },\n    { name: "DAREDEVIL", image: "daredevil.jpg" },\n    { name: "BLACK WIDOW", image: "blackwidow.jpg" },\n    { name: "CAPTAIN AMERICA", image: "captanamerica.jpg" },\n    { name: "WOLVERINE", image: "wolverine.jpg" }\n  ];\n\n  res.render("index", { superheroes: superheroes });\n});\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We can see that we have a ",(0,p.kt)("inlineCode",{parentName:"p"},"superheroes array")," that has JavaScript objects as content")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Each object has a superhero name and image")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Then we pass this superheroes array as superheroes object property")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"This means that at the template level we'll have a ",(0,p.kt)("inlineCode",{parentName:"p"},"superheroes")," variable that represents this objects")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Now lets show the superheroes on our home page")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Using each we can iterate the superheroes collection in the ",(0,p.kt)("inlineCode",{parentName:"p"},"index.pug")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-pug"},"each superhero in superheroes\n  div.superhero-container\n    img(src='/img/superheroes/' + superhero.image)\n    h3= superhero.name\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Update index.pug to match this code:"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-pug"},"extends ./layout.pug\n\nblock content\n  h1 Superheroes\n  p This site shows superheroes information\n  each superhero in superheroes\n    div.superhero-container\n      img(src='/img/superheroes/' + superhero.image)\n      h3= superhero.name\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Now our site has all the superheroes pictures and name but it would be nice to change the design a little")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Add the following class to your ",(0,p.kt)("inlineCode",{parentName:"p"},"styles.css")," file"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-css"},".superhero-container {\n  display: inline-block;\n  width: 200px;\n  text-align: center;\n  margin-right: 10px;\n  margin-bottom: 40px;\n}\n\n.superhero-container img {\n  width: auto;\n  max-width: 100%;\n}\n")))),(0,p.kt)("h3",{id:"adding-routes"},"Adding routes"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"It would be nice to be able to click the image or the superhero name and see a detail page")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"To create this feature we need to do a couple of changes")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"First we need to change the ",(0,p.kt)("inlineCode",{parentName:"p"},"index.pug")," template"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-pug"},"extends ./layout.pug\n\nblock content\n  h1 Superheroes\n  p This site shows superheroes information\n  each superhero in superheroes\n    div.superhero-container\n      a(href=\"/superheroes/\")\n        img(src='/img/superheroes/' + superhero.image)\n        h3= superhero.name\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We added a link element that relates this page with ",(0,p.kt)("inlineCode",{parentName:"p"},"/superheroes/"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"So far so good but we still don't have the superheroes route configured")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Lets add a new route config in the ",(0,p.kt)("inlineCode",{parentName:"p"},"index.js")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'app.get("/superheroes/", (req, res) => {\n  const superheroes = [\n    { name: "SPIDER-MAN", image: "spiderman.jpg" },\n    { name: "CAPTAIN MARVEL", image: "captainmarvel.jpg" },\n    { name: "HULK", image: "hulk.jpg" },\n    { name: "THOR", image: "thor.jpg" },\n    { name: "IRON MAN", image: "ironman.jpg" },\n    { name: "DAREDEVIL", image: "daredevil.jpg" },\n    { name: "BLACK WIDOW", image: "blackwidow.jpg" },\n    { name: "CAPTAIN AMERICA", image: "captanamerica.jpg" },\n    { name: "WOLVERINE", image: "wolverine.jpg" }\n  ];\n\n  res.render("superhero", { superheroes: superheroes });\n});\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Great now we have the route but it looks like we have the superheroes repeated")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Also we only need to show one superhero at the time")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"And.. we need to create the superhero template")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Uff.. so many things we better start soon!"))),(0,p.kt)("h3",{id:"creating-more-templates"},"Creating more templates"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Create the ",(0,p.kt)("inlineCode",{parentName:"p"},"superhero.pug")," template inside the views folder")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Add the following code in the ",(0,p.kt)("inlineCode",{parentName:"p"},"superhero.pug")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-pug"},"extends ./layout.pug\n\nblock content\n  img(src='/img/superheroes/' + superhero.image)\n  h3= superhero.name\n")))),(0,p.kt)("h3",{id:"getting-the-data-by-id"},"Getting the data by id"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Great we are using the layout template that we created but we don't have the superhero data")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"How can we deal with this situation?")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"So we know that we can use the router to pass data to the template")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"But we need to know the selected superhero, right?")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We can use the superhero name to select the selected superhero")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Or we can use an id")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"To use the id will have to update the superheroes array objects"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'const superheroes = [\n  { id: 1, name: "SPIDER-MAN", image: "spiderman.jpg" },\n  { id: 2, name: "CAPTAIN MARVEL", image: "captainmarvel.jpg" },\n  { id: 3, name: "HULK", image: "hulk.jpg" },\n  { id: 4, name: "THOR", image: "thor.jpg" },\n  { id: 5, name: "IRON MAN", image: "ironman.jpg" },\n  { id: 6, name: "DAREDEVIL", image: "daredevil.jpg" },\n  { id: 7, name: "BLACK WIDOW", image: "blackwidow.jpg" },\n  { id: 8, name: "CAPTAIN AMERICA", image: "captanamerica.jpg" },\n  { id: 9, name: "WOLVERINE", image: "wolverine.jpg" }\n];\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Great now we have ids on our superheroes objects")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"I don't know about you but I think it's still pretty bad to have this duplicated array")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Also we'll need the ids to create the links")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"What about if we move this array to a higher score level so both routes can use it? Check the updated ",(0,p.kt)("inlineCode",{parentName:"p"},"index.js")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst app = express();\nconst port = 3000;\n\napp.set("view engine", "pug");\napp.use(express.static("public"));\n\nconst superheroes = [\n  { id: 1, name: "SPIDER-MAN", image: "spiderman.jpg" },\n  { id: 2, name: "CAPTAIN MARVEL", image: "captainmarvel.jpg" },\n  { id: 3, name: "HULK", image: "hulk.jpg" },\n  { id: 4, name: "THOR", image: "thor.jpg" },\n  { id: 5, name: "IRON MAN", image: "ironman.jpg" },\n  { id: 6, name: "DAREDEVIL", image: "daredevil.jpg" },\n  { id: 7, name: "BLACK WIDOW", image: "blackwidow.jpg" },\n  { id: 8, name: "CAPTAIN AMERICA", image: "captanamerica.jpg" },\n  { id: 9, name: "WOLVERINE", image: "wolverine.jpg" }\n];\n\napp.get("/", (req, res) => {\n  res.render("index", { superheroes: superheroes });\n});\n\napp.get("/superheroes/", (req, res) => {\n  res.render("superhero", { superheroes: superheroes });\n});\n\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n')))),(0,p.kt)("h3",{id:"refining-the-code"},"Refining the code"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"This is looking much better now")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We still have a problem on how to know the selected superhero")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Having the ids to identify them is great but we still need to update our code")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"First modify the links to use the superhero id in the ",(0,p.kt)("inlineCode",{parentName:"p"},"index.pug")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-pug"},'a(href="/superheroes/" + superhero.id)\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"If the user clicks on this link it will redirect to a url that looks like this: http://localhost:3000/superheroes/2")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"So it looks like the user will select a superhero and we'll go to the /superheroes/ page and we have the id")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Now we need to update our express route so we can get the id param and get the superhero data in the ",(0,p.kt)("inlineCode",{parentName:"p"},"index.js")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'app.get("/superheroes/:id", (req, res) => {\n  const selectedId = req.params.id;\n\n  let selectedSuperhero = superheroes.filter(superhero => {\n    return superhero.id === +selectedId;\n  });\n\n  selectedSuperhero = selectedSuperhero[0];\n\n  res.render("superhero", { superhero: selectedSuperhero });\n});\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Using ",(0,p.kt)("inlineCode",{parentName:"p"},"'/superheroes/:id'")," we define that this route contains a parameter that we need to get")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"This request parameter is called id and will come after the ",(0,p.kt)("inlineCode",{parentName:"p"},"superheroes")," route")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"To get this value we use ",(0,p.kt)("inlineCode",{parentName:"p"},"req.params.id"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We could name this parameter with any name")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Then we filter the superheroes array by id")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"And assighn the selected superhero to the ",(0,p.kt)("inlineCode",{parentName:"p"},"selectedSuperhero")," variable")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"The only remainding thing to do is render the template using the selectedSuperhero data")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Now we can call any this url ",(0,p.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/superheroes/2")," changing the id from 1 to 9")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Our home page still has blue and violet links so update the css so it looks better"))),(0,p.kt)("h3",{id:"improving-the-css"},"Improving the CSS"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"styles.css"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-css"},".superhero-container a {\n  color: black;\n  text-decoration: none;\n}\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Great we're able to show the superheroes home and detail page"))),(0,p.kt)("h3",{id:"adding-new-data"},"Adding new data"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"It would be really nice to be able to create a new superhero too, right?")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"To create any new resource we need to create a form")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We'll create a new template and add a form")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Create the ",(0,p.kt)("inlineCode",{parentName:"p"},"create.pug")," file in the views folder and add the following code"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-pug"},'div.create-container\n  form(action="/superheroes",  method="post")\n    input(type="text", placeholder="suerhero name", required="required", name="superhero")\n    button Create\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"This code will transform in this HTML"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-html"},'<div class="create-container">\n  <form action="/superheroes" method="post">\n    <input type="text" placeholder="suerhero name" required="required" name="superhero" />\n    <button>Create</button>\n  </form>\n</div>\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"So we can see that it's just a form that when gets submited it will submit the values to ",(0,p.kt)("inlineCode",{parentName:"p"},"/superheroes"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"As we have an input with the ",(0,p.kt)("inlineCode",{parentName:"p"},"superhero name")," we'll be able to retrieve the value from the server using this same name")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"The form is set to use the HTTP post method so we'll need to create a route handle to handle this request")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"It's nice to have the template ready but we still need to add it to the index.pug file")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We can do this using Pug ",(0,p.kt)("inlineCode",{parentName:"p"},"include"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Add the following line to your ",(0,p.kt)("inlineCode",{parentName:"p"},"index.pug")," file: ",(0,p.kt)("inlineCode",{parentName:"p"},"include ./create.pug")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-pug"},"extends ./layout.pug\n\nblock content\n  h1 Superheroes\n  p This site shows superheroes information\n  include ./create.pug\n\n  each superhero in superheroes\n    div.superhero-container\n      a(href=\"/superheroes/\" + superhero.id)\n        img(src='/img/superheroes/' + superhero.image)\n        h3= superhero.name\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"And now add some styles so the form looks better in the ",(0,p.kt)("inlineCode",{parentName:"p"},"styles.css")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-css"},'.create-container {\n  padding: 10px;\n}\n\n.create-container input[type="text"] {\n  font-size: 16px;\n  padding: 5px;\n}\n\n.create-container button {\n  font-size: 16px;\n  padding: 5px;\n  margin-left: 10px;\n}\n')))),(0,p.kt)("h3",{id:"handling-post-requests"},"Handling POST requests"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Now that our views are ready lets create the route handler")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"To hande post requests with express we need to install ",(0,p.kt)("a",{parentName:"p",href:"https://github.com/expressjs/body-parser"},"body-parser")," module")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"From the body-parser site we get this definition: ",(0,p.kt)("inlineCode",{parentName:"p"},"Parse incoming request bodies in a middleware before your handlers, available under the req.body property"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"This means that we need to configure body-parser as middleware and it will append the submited values to the request object body property")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Install body-parser as dependency"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-pug"},"npm i body-parser\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"After installing it we can require it from our ",(0,p.kt)("inlineCode",{parentName:"p"},"index.js")," file"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'const bodyParser = require("body-parser");\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Add body-parser as middleware in the ",(0,p.kt)("inlineCode",{parentName:"p"},"index.js")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},"const urlencodedParser = bodyParser.urlencoded({ extended: false });\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"After configured body-parser as middleware we can create our route handler")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"This route handler will listen post requests on /superheroes")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"It will recibe the superhero name as request body parameter")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Once we have the superhero name we'll have to create a new superhero object and append it to the superheroes list")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Then send a response to the client")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"The new route handler must have the following code in your ",(0,p.kt)("inlineCode",{parentName:"p"},"index.js")),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'app.post("/superheroes", urlencodedParser, (req, res) => {\n  const newId = superheroes[superheroes.length - 1].id + 1;\n  const newSuperHero = {\n    id: newId,\n    name: req.body.superhero.toUpperCase(),\n    image: "lukecage.jpg"\n  };\n\n  superheroes.push(newSuperHero);\n\n  res.redirect("/");\n});\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"First we create a post route handler to ",(0,p.kt)("inlineCode",{parentName:"p"},"app.post('/superheroes')"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Then we added body-parser to this call using the ",(0,p.kt)("inlineCode",{parentName:"p"},"urlencodedParser")," middleware")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Body parser allows us to configure it for all routes or some of them")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"In this case we only need it for this route and that's why we use ",(0,p.kt)("inlineCode",{parentName:"p"},"urlencodedParser"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"When we get a request body-parser will add the values to the request object body")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"This means that in our route this it's going to be ",(0,p.kt)("inlineCode",{parentName:"p"},"req.body"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"In this example the req.body will look something like:"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'{\n  superhero: "Value from the form";\n}\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"To get the submited superhero value we use ",(0,p.kt)("inlineCode",{parentName:"p"},"req.body.superhero")," and as it's a string we just call ",(0,p.kt)("inlineCode",{parentName:"p"},"toUpperCase()")," so it's consistent with the rest of the superheroes names")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"As we need an ID for the new super hero we can do something like: ",(0,p.kt)("inlineCode",{parentName:"p"},"const newId = superheroes[superheroes.length - 1].id + 1;"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We'll get the last superhero id and increment one")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"This option is valid as it's not code that we'll put in production")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We can get this value from a database once we insert the new value")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"After getting the new id we can create a new superhero object"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'const newSuperHero = {\n  id: newId,\n  name: req.body.superhero.toUpperCase(),\n  image: "lukecage.jpg"\n};\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We use the same object structure as the rest of the superheroes objects")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Use newId as id")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"And the name we get it from the request body")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"As we don't have an image for now let's add some value")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Now that we have the superhero we can add it to the collection"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},"superheroes.push(newSuperHero);\n")))),(0,p.kt)("h3",{id:"responding-requests"},"Responding requests"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"And then we send the response.. oh wait.. what do we respond?")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"In all our previous routes we send something back as response but in this case we created a new route handler")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"We could return the same render response that we send on ",(0,p.kt)("inlineCode",{parentName:"p"},"/"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"If we do this the user will see that we're showing a different url but with the same content")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"So what we can do it's redirect the request to the ",(0,p.kt)("inlineCode",{parentName:"p"},"/")," handler")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"As we added a new superhero to the collection it will get all the superheroes with the one we just created")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Then it will render the template and send the response back to the user")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"The user won't notice all the things that just happened")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"So our ",(0,p.kt)("inlineCode",{parentName:"p"},"index.js")," file looks like this:"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst app = express();\nconst port = 3000;\nconst bodyParser = require("body-parser");\nconst urlencodedParser = bodyParser.urlencoded({ extended: false });\n\napp.set("view engine", "pug");\napp.use(express.static("public"));\n\nconst superheroes = [\n  { id: 1, name: "SPIDER-MAN", image: "spiderman.jpg" },\n  { id: 2, name: "CAPTAIN MARVEL", image: "captainmarvel.jpg" },\n  { id: 3, name: "HULK", image: "hulk.jpg" },\n  { id: 4, name: "THOR", image: "thor.jpg" },\n  { id: 5, name: "IRON MAN", image: "ironman.jpg" },\n  { id: 6, name: "DAREDEVIL", image: "daredevil.jpg" },\n  { id: 7, name: "BLACK WIDOW", image: "blackwidow.jpg" },\n  { id: 8, name: "CAPTAIN AMERICA", image: "captanamerica.jpg" },\n  { id: 9, name: "WOLVERINE", image: "wolverine.jpg" }\n];\n\napp.get("/", (req, res) => {\n  res.render("index", { superheroes: superheroes });\n});\n\napp.get("/superheroes/:id", (req, res) => {\n  const selectedId = req.params.id;\n\n  let selectedSuperhero = superheroes.filter(superhero => {\n    return superhero.id === +selectedId;\n  });\n\n  selectedSuperhero = selectedSuperhero[0];\n\n  res.render("superhero", { superhero: selectedSuperhero });\n});\n\napp.post("/superheroes", urlencodedParser, (req, res) => {\n  const newId = superheroes[superheroes.length - 1].id + 1;\n  const newSuperHero = {\n    id: newId,\n    name: req.body.superhero.toUpperCase(),\n    image: "lukecage.jpg"\n  };\n\n  superheroes.push(newSuperHero);\n\n  res.redirect("/");\n});\n\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n'))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"It's so good to see how our project keeps on groing and that we can add more features to it")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"I'm sure that you're thinking about how to upload a picture")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"To support this we need to refactor our code to use ",(0,p.kt)("a",{parentName:"p",href:"https://github.com/expressjs/multer"},"multer")," instead of body-parser")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},"Install multer as dependency"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"npm i multer\n")))))}c.isMDXComponent=!0}}]);